/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view;

import client.control.Controller;
import client.model.BinaryFile;
import client.model.Job;
import client.model.LogicalFile;
import client.model.RowTableModel;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author bram
 */
public class FileTab extends JPanel {

    private static final Logger LOGGER = Logger.getLogger(FileTab.class.getSimpleName());
    private static final int REQUIRED_PROXY_TIME = 6;
    private static final int DEFAULT_PROXY_TIME = 12;
    private Controller controller;
    private RowTableModel<LogicalFile> fileModel;
    private Object[] options = {"Cancel", "No To All", "Yes To All", "No", "Yes"};

    /**
     * Creates new DataPanel.
     *
     * @param model the RowTableModel for the JTable
     */
    public FileTab(Controller controller) {
        this.controller = controller;

        initComponents();

        fileModel = new RowTableModel<>(LogicalFile.class, "getName", "getType", "getDiskspace", "getStatus");
        fileTable.setModel(fileModel);
        fileTable.setAutoCreateRowSorter(true);
        fileTable.getColumnModel().getColumn(2).setCellRenderer(new ByteRenderer());
        fileTable.getColumnModel().getColumn(3).setCellRenderer(new ProgressRenderer());
        setPreferredColumnWidths(new double[]{0.7, 0.1, 0.05, 0.15});
        controller.setFileModel(fileModel);
    }

    private void setPreferredColumnWidths(double[] percentages) {
        Dimension tableDim = fileTable.getPreferredSize();
        double total = 0;
        for (int i = 0; i < fileTable.getColumnModel().getColumnCount(); i++) {
            total += percentages[i];
        }

        for (int i = 0; i < fileTable.getColumnModel().getColumnCount(); i++) {
            TableColumn column = fileTable.getColumnModel().getColumn(i);
            column.setPreferredWidth((int) (tableDim.width * (percentages[i] / total)));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(640, 450));

        usernameLabel.setText(" ");
        usernameLabel.setFocusable(false);
        usernameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        uploadButton.setText("Add File");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(fileTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(usernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLabel)
                    .addComponent(uploadButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteButton)
                        .addComponent(downloadButton)))
                .addGap(4, 4, 4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        new UploadDialog(this, controller).setVisible(true);
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed

        //create local proxy
        if (controller.getLocalProxyLifetime() < REQUIRED_PROXY_TIME) {
            PasswordDialog dialog = new PasswordDialog(this, "Local Proxy Required!");
            dialog.setVisible(true);

            if (dialog.getValue() != JOptionPane.OK_OPTION) {
                dialog.dispose();
                return;
            }

            boolean succes;
            try {
                succes = controller.createLocalProxy(dialog.getPassword(), DEFAULT_PROXY_TIME);
            } catch (IOException | InterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "I/O Error occured", JOptionPane.WARNING_MESSAGE);
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                return;
            } finally {
                dialog.dispose();
            }

            if (!succes) {
                JOptionPane.showMessageDialog(this, "Invalid passphrase!", "Authentication Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        JFileChooser fileChooser = FileChooserFactory.getSaveToFolderDialog();
        int value = fileChooser.showSaveDialog(this);
        if (value == JFileChooser.APPROVE_OPTION) {
            final List<LogicalFile> downloadList = new ArrayList<>();
            final File dir = fileChooser.getSelectedFile();
            boolean overwriteAll = false;
            for (int index : fileTable.getSelectedRows()) {
                LogicalFile file = fileModel.getRow(index);
                if (!overwriteAll && new File(dir, file.getID()).exists()) {
                    int option = JOptionPane.showOptionDialog(
                            this, "<html><body><p style='width: 225px;'>File "
                            + dir.getAbsolutePath() + file.getID()
                            + " already exists. Do you want to overwrite it? "
                            + "</p></body></html>", "Overwrite file",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                            null, options, options[0]);

                    if (option <= 1) {
                        return;
                    }

                    if (option == 2) {
                        overwriteAll = true;
                    }
                    if (option == 3) {
                        continue;
                    }
                }
                downloadList.add(file);
            }

            if (!downloadList.isEmpty()) {
                controller.executeInBackground(new Runnable() {
                    @Override
                    public void run() {
                        for (LogicalFile file : downloadList) {
                            try {
                                controller.downloadFromSE(file, dir);
                            } catch (IOException | InterruptedException ex) {
                                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                            }
                        }
                        JOptionPane.showMessageDialog(FileTab.this, "All download are finished", "Task completed", JOptionPane.INFORMATION_MESSAGE);
                    }
                });
            }
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        //create remote proxy
        if (controller.getRemoteProxyLifetime() < REQUIRED_PROXY_TIME) {

            PasswordDialog dialog = new PasswordDialog(this, "Grid Proxy Required");
            dialog.setVisible(true);

            if (dialog.getValue() != JOptionPane.OK_OPTION) {
                dialog.dispose();
                return;
            }

            boolean succes;
            try {
                succes = controller.createRemoteProxy(dialog.getPassword(), DEFAULT_PROXY_TIME);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "I/O Error occured", JOptionPane.WARNING_MESSAGE);
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                return;
            } finally {
                dialog.dispose();
            }

            if (!succes) {
                JOptionPane.showMessageDialog(this, "Invalid passphrase!", "Authentication Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        //find binary files being used by jobs
        Set<BinaryFile> applications = new HashSet<>();
        for (Job job : controller.getJobs()) {
            if (!job.isFinished()) {
                applications.add(job.getApplication());
            }
        }

        for (int index : fileTable.getSelectedRows()) {
            if (controller.getFile(index) instanceof BinaryFile) {
                BinaryFile file = (BinaryFile) controller.getFile(index);
                if (applications.contains(file)) {
                    JOptionPane.showMessageDialog(this, "<html><body><p style='width: 225px;'>"
                            + "File " + file.getID()
                            + " is used by running jobs"
                            + "</p></body></html>", "Can't delete file",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }

        boolean succes = false;
        try {
            succes = controller.removeFiles(fileTable.getSelectedRows());
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
        }

        if (!succes) {
            JOptionPane.showMessageDialog(this, "Not all files have been deleted!", "Error on delete", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JTable fileTable;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton uploadButton;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    class ProgressRenderer extends DefaultTableCellRenderer {

        private final JProgressBar progressBar;

        public ProgressRenderer() {
            super();
            setOpaque(true);
            progressBar = new JProgressBar(0, 100);
            progressBar.setString("");
            progressBar.setStringPainted(true);
            progressBar.setIndeterminate(false);
            progressBar.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Integer i = (Integer) value;

            if (i < 0 || i > 100) {
                return super.getTableCellRendererComponent(table, "Error", isSelected, hasFocus, row, column);
            }
            progressBar.setValue(i);
            progressBar.setString(i == 100 ? "Available" : i >= 50 ? "Uploading" : "Compressing");
            return progressBar;
        }
    }

    class ByteRenderer extends DefaultTableCellRenderer {

        private static final boolean si = true;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

            Long bytes = (Long) value;

            int unit = si ? 1000 : 1024;
            if (bytes < unit) {
                return super.getTableCellRendererComponent(table, bytes + " B", isSelected, hasFocus, row, column);
            }
            int exp = (int) (Math.log(bytes) / Math.log(unit));
            String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
            String text = String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);

            return super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column);
        }
    }
}
