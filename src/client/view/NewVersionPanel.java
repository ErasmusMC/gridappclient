/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view;

import client.control.Controller;
import client.model.Application;
import client.model.ArchiveBuilder;
import client.model.BinaryFile;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author bram
 */
public class NewVersionPanel extends javax.swing.JPanel {

    private static final int REQUIRED_PROXY_TIME = 6;
    private static final int DEFAULT_PROXY_TIME = 12;
    private static final Logger LOGGER = Logger.getLogger(NewVersionPanel.class.getSimpleName());
    private Controller controller;
    private DefaultListModel<File> fileModel;

    /**
     * Creates new form NewApplicationPanel
     */
    public NewVersionPanel(Controller controller) {
        this.controller = controller;
        initComponents();

        fileModel = new DefaultListModel<>();
        jList1.setModel(fileModel);

        for (Application application : Application.values()) {
            applicationComboBox.addItem(application);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uploadButton = new javax.swing.JButton();
        applicationComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        versionField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose an application:");

        browseButton.setText("Add Files");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        try {
            versionField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**.**.***")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Files:");

        jLabel3.setText("Version:");

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(applicationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(versionField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applicationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(versionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(browseButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(uploadButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fileChooser = FileChooser.FILE.getAddFileDialog(true);
        int value = fileChooser.showOpenDialog(this);
        if (value == JOptionPane.OK_OPTION) {
            for (File file : fileChooser.getSelectedFiles()) {
                fileModel.addElement(file);
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        Application application = (Application) applicationComboBox.getSelectedItem();
        List<File> files = Collections.list(fileModel.elements());
        
        String version = versionField.getText().replace(" ", "");
        BinaryFile binaries = new BinaryFile(application.toString().toLowerCase() + "-" + version,".tar.gz");

        if (binaries.toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill out all fields!", "Missing Files", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (files != null && files.size() <= 0) {
            JOptionPane.showMessageDialog(this, "Please provide files!", "Missing Files", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (controller.getFiles().contains(binaries)) {
            int value = JOptionPane.showConfirmDialog(this, "Do you want to overwrite it?", "Application already exists", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (value != JOptionPane.YES_OPTION) {
                return; 
            }
            
            boolean succes = false;
            try {
                succes = controller.removeFile(binaries);
            } catch (IOException ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
            }
            
            if (!succes) {
                JOptionPane.showMessageDialog(this, "Unable to delete file " + binaries.getName() + "!", "Error on delete", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (controller.getLocalProxyLifetime() < REQUIRED_PROXY_TIME) {
            PasswordDialog dialog = new PasswordDialog(this, "Local Proxy Required!");
            dialog.setVisible(true);

            if (dialog.getValue() != JOptionPane.OK_OPTION) {
                dialog.dispose();
                return;
            }

            boolean succes;
            try {
                succes = controller.createLocalProxy(dialog.getPassword(), DEFAULT_PROXY_TIME);
            } catch (IOException | InterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "I/O Error occured", JOptionPane.WARNING_MESSAGE);
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                return;
            } finally {
                dialog.dispose();
            }

            if (!succes) {
                JOptionPane.showMessageDialog(this, "Invalid passphrase!", "Authentication Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        controller.addFile(binaries, new ArchiveBuilder(files));
        getTopLevelAncestor().setVisible(false);
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for (Object object : jList1.getSelectedValuesList()) {
            fileModel.removeElement(object);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox applicationComboBox;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton uploadButton;
    private javax.swing.JFormattedTextField versionField;
    // End of variables declaration//GEN-END:variables
}
