/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view;

import client.control.Controller;
import client.model.ArchiveBuilder;
import client.model.LogicalFile;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author bram
 */
public class NewFilePanel extends JPanel {

    private static final Logger LOGGER = Logger.getLogger(NewFilePanel.class.getSimpleName());
    private static final int REQUIRED_PROXY_TIME = 6;
    private static final int DEFAULT_PROXY_TIME = 12;
    private static final String defaultFileText = "Data File";
    private static final String defaultFilenameText = "Filename";
    private final InputVerifier filenameVerifier = new FilenameInputVerifier();
    private File file;
    private Controller controller;

    /**
     * Creates new form AnnotationPanel
     */
    public NewFilePanel(Controller controller) {
        this.controller = controller;
        initComponents();

        fileTextField.setText(defaultFileText);
        filenameTextField.setText(defaultFilenameText);
        filenameTextField.setInputVerifier(filenameVerifier);
        filenameTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                uploadButton.setEnabled(filenameVerifier.verify(filenameTextField));
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                uploadButton.setEnabled(filenameVerifier.verify(filenameTextField));
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                uploadButton.setEnabled(filenameVerifier.verify(filenameTextField));
            }
        });
        filenameTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.getKeyChar() == File.separatorChar || e.getKeyChar() == ' ') {
                    e.consume();
                }
                filenameTextField.requestFocusInWindow();
            }
        });

        uploadButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browseButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        filenameTextField = new javax.swing.JTextField();

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        fileTextField.setEditable(false);
        fileTextField.setEnabled(false);

        filenameTextField.setEditable(false);
        filenameTextField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(fileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filenameTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(uploadButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fileChooser = FileChooser.FILE.getAddFileDialog();
        fileChooser.setAcceptAllFileFilterUsed(true);
        int value = fileChooser.showOpenDialog(this);
        if (value == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            fileTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
            fileTextField.setEnabled(true);
            filenameTextField.setText(fileChooser.getSelectedFile().getName());
            filenameTextField.setEnabled(true);
            filenameTextField.setEditable(true);
            uploadButton.setEnabled(true);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed

        if (file == null) {
            JOptionPane.showMessageDialog(this, "Please fill out all fields!", "Missing File", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        LogicalFile entry = new LogicalFile(filenameTextField.getText());

        if (controller.getFiles().contains(entry)) {
            int value = JOptionPane.showConfirmDialog(this, "Do you want to overwrite it?", "File already exists", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (value != JOptionPane.YES_OPTION) {
                return;
            }
            
            boolean succes = false;
            try {
                succes = controller.removeFile(entry);
            } catch (IOException ex) {
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
            }

            if (!succes) {
                JOptionPane.showMessageDialog(this, "Unable to delete file " + entry.getName() + "!", "Error on delete", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (controller.getLocalProxyLifetime() < REQUIRED_PROXY_TIME) {
            PasswordDialog dialog = new PasswordDialog(this, "Local Proxy Required!");
            dialog.setVisible(true);

            if (dialog.getValue() != JOptionPane.OK_OPTION) {
                dialog.dispose();
                return;
            }

            boolean succes;
            try {
                succes = controller.createLocalProxy(dialog.getPassword(), DEFAULT_PROXY_TIME);
            } catch (IOException | InterruptedException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "I/O Error occured", JOptionPane.WARNING_MESSAGE);
                LOGGER.log(Level.SEVERE, ex.getMessage(), ex);
                return;
            } finally {
                dialog.dispose();
            }

            if (!succes) {
                JOptionPane.showMessageDialog(this, "Invalid passphrase!", "Authentication Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        controller.addFile(entry, new ArchiveBuilder(file));
        getTopLevelAncestor().setVisible(false);
    }//GEN-LAST:event_uploadButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JTextField filenameTextField;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables

    class FilenameInputVerifier extends InputVerifier {

        private final Pattern pattern = Pattern.compile(
                "# Match a valid Windows filename (unspecified file system).          \n"
                + "^                                # Anchor to start of string.        \n"
                + "(?!                              # Assert filename is not: CON, PRN, \n"
                + "  (?:                            # AUX, NUL, COM1, COM2, COM3, COM4, \n"
                + "    CON|PRN|AUX|NUL|             # COM5, COM6, COM7, COM8, COM9,     \n"
                + "    COM[1-9]|LPT[1-9]            # LPT1, LPT2, LPT3, LPT4, LPT5,     \n"
                + "  )                              # LPT6, LPT7, LPT8, and LPT9...     \n"
                + "  (?:\\.[^.]*)?                  # followed by optional extension    \n"
                + "  $                              # and end of string                 \n"
                + ")                                # End negative lookahead assertion. \n"
                + "[^<>:\"/\\\\|?*\\x00-\\x1F]*     # Zero or more valid filename chars.\n"
                + "[^<>:\"/\\\\|?*\\x00-\\x1F\\ .]  # Last char is not a space or dot.  \n"
                + "$                                # Anchor to end of string.            ",
                Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE | Pattern.COMMENTS);

        @Override
        public boolean verify(JComponent input) {
            Matcher matcher = pattern.matcher(((JTextField) input).getText());
            return matcher.matches();
        }

        @Override
        public boolean shouldYieldFocus(JComponent input) {

            if (verify(input)) {
                String cleanedFilename = filenameTextField.getText();
                cleanedFilename = cleanedFilename.replace(" ", "");
                filenameTextField.setText(cleanedFilename);
                return true;
            } else {
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
        }
    }
}
